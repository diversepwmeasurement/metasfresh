env:
  PIPELINE_VERSION: 0.3.6
jobs:
  backend:
    needs:
    - init
    - java
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        INIT_BUILD_PROPS: ${{ needs.init.outputs.build-info-properties }}
        INIT_GIT_PROPS: ${{ needs.init.outputs.git-properties }}
      name: prepare
      run: 'echo -e "$INIT_BUILD_PROPS" > docker-builds/metadata/build-info.properties

        echo -e "$INIT_GIT_PROPS" > docker-builds/metadata/git.properties

        '
    - continue-on-error: true
      name: build-api
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend.api \

        --cache-to type=inline \

        --cache-from metasfresh/metas-api:${{ needs.init.outputs.tag-floating }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-api:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-app
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend.app \

        --cache-to type=inline \

        --cache-from metasfresh/metas-app:${{ needs.init.outputs.tag-floating }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-app:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-externalsystems
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.camel.externalsystems \

        --cache-to type=inline \

        --cache-from metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating
        }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed }}
        \

        .

        '
    - continue-on-error: true
      name: build-edi
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.camel.edi \

        --cache-to type=inline \

        --cache-from metasfresh/metas-edi:${{ needs.init.outputs.tag-floating }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-edi:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-edi:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-db
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.db-standalone \

        --cache-to type=inline \

        --cache-from metasfresh/metas-db:${{ needs.init.outputs.tag-floating }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-db-migrations
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.db-migrations \

        --cache-to type=inline \

        --cache-from metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-migrations
        \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-migrations
        \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-migrations \

        .

        '
    - continue-on-error: true
      name: build-db-preloaded
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.db-preloaded \

        --cache-to type=inline \

        --cache-from metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded
        \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded
        \

        --tag metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-api:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}

          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}

          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}

          docker push metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-migrations

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-migrations

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded

          docker push metasfresh/metas-db:${{ needs.init.outputs.tag-floating }}-preloaded

          docker push metasfresh/metas-edi:${{ needs.init.outputs.tag-fixed }}

          docker push metasfresh/metas-edi:${{ needs.init.outputs.tag-floating }}

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: produce-summary
      run: 'echo ''#### images'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-externalsystems:${{ needs.init.outputs.tag-fixed
        }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-migrations''
        >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-preloaded''
        >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-edi:${{ needs.init.outputs.tag-fixed }}'' >> $GITHUB_STEP_SUMMARY

        '
  compatibility-images:
    needs:
    - init
    - frontend
    - backend
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        INIT_BUILD_PROPS: ${{ needs.init.outputs.build-info-properties }}
        INIT_GIT_PROPS: ${{ needs.init.outputs.git-properties }}
      name: prepare
      run: 'echo -e "$INIT_BUILD_PROPS" > docker-builds/metadata/build-info.properties

        echo -e "$INIT_GIT_PROPS" > docker-builds/metadata/git.properties

        '
    - continue-on-error: true
      name: build-api-compat
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend.api.compat \

        --cache-to type=inline \

        --cache-from metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat
        \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat \

        --tag metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}-compat \

        .

        '
    - continue-on-error: true
      name: build-app-compat
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend.app.compat \

        --cache-to type=inline \

        --cache-from metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat
        \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat \

        --tag metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat \

        .

        '
    - continue-on-error: true
      name: build-mobile-compat
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.mobile.compat \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}-compat
        \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}-compat
        \

        --tag metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}-compat \

        .

        '
    - continue-on-error: true
      name: build-frontend-compat
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.frontend.compat \

        --cache-to type=inline \

        --cache-from metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating
        }}-compat \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }}-compat
        \

        --tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat
        \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-api:${{ needs.init.outputs.tag-fixed
          }}-compat

          docker push metasfresh/metas-api:${{ needs.init.outputs.tag-floating }}-compat

          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat

          docker push metasfresh/metas-app:${{ needs.init.outputs.tag-floating }}-compat

          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat

          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating
          }}-compat

          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}-compat

          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating
          }}-compat

          docker tag metasfresh/metas-api:${{ needs.init.outputs.tag-fixed }}-compat
          metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed }}-compat

          docker tag metasfresh/metas-app:${{ needs.init.outputs.tag-fixed }}-compat
          metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat

          docker tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}-compat
          metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed }}-compat

          docker push metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed
          }}-compat

          docker push metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat

          docker push metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed
          }}-compat

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: produce-summary
      run: 'echo ''compatibility images are available under the following tag: `${{
        needs.init.outputs.tag-fixed }}-compat`'' >> $GITHUB_STEP_SUMMARY

        echo ''and can be deployed on any regular system via metasfresh instances
        rollout using the above tag as *Baseversion*.'' >> $GITHUB_STEP_SUMMARY

        echo ''#### images'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metasfresh-webapi:${{ needs.init.outputs.tag-fixed }}-compat''
        >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metasfresh-app:${{ needs.init.outputs.tag-fixed }}-compat''
        >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metasfresh-webui:${{ needs.init.outputs.tag-fixed }}-compat''
        >> $GITHUB_STEP_SUMMARY

        '
  cucumber-build:
    name: build (cucumber)
    needs:
    - init
    - java
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        METASFRESH_PACKAGES_READ_TOKEN: ${{ secrets.METASFRESH_PACKAGES_READ_TOKEN
          }}
      name: prepare-settings
      run: 'envsubst < docker-builds/mvn/settings.xml > docker-builds/mvn/local-settings.xml

        '
    - continue-on-error: true
      name: build-cucumber
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.cucumber \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-cucumber:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-cucumber:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-cucumber:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-cucumber:${{ needs.init.outputs.tag-floating
          }}

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
  cucumber-run:
    name: test (cucumber)
    needs:
    - init
    - backend
    - frontend
    - cucumber-build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      uses: testspace-com/setup-testspace@v1
      with:
        domain: metasfresh
        token: ${{ secrets.TESTSPACE_TOKEN }}
    - continue-on-error: true
      env:
        cucumberparams: ${{ matrix.params }}
        mfversion: ${{ needs.init.outputs.tag-fixed }}
      name: run-tests
      run: 'mkdir cucumber

        docker pull metasfresh/metas-cucumber:${{ needs.init.outputs.tag-fixed }}

        docker cp "$(docker create --name tempcopytainer metasfresh/metas-cucumber:${{
        needs.init.outputs.tag-fixed }}):/compose.yml" . && docker rm tempcopytainer

        docker-compose up --abort-on-container-exit --exit-code-from cucumber 2>&1
        | tee cucumber.log && echo "${PIPESTATUS[0]}" > cucumber.exit-code

        docker commit metasfresh_db_1 metasfresh/metas-db:${{ needs.init.outputs.tag-fixed
        }}-postcucumber-${{ matrix.profile }}

        docker-compose down

        cat cucumber.log | grep -q "BUILD SUCCESS" && echo "$?" > cucumber.mvn.exit-code
        || echo "$?" > cucumber.mvn.exit-code

        '
      timeout-minutes: 120
    - continue-on-error: true
      name: push-results
      run: 'find cucumber -type d -links 2 -exec testspace [{}/${{ matrix.profile
        }}]{}/*.xml \;                                                                            #
        upload all cucumber xml''s to testspace

        testspace "[cucumber/${{ matrix.profile }}]cucumber/*.html"                                                                                              #
        upload cucumber html

        testspace "[cucumber/${{ matrix.profile }}]cucumber.log{$(awk ''{ sum += $1
        } END { print sum }'' cucumber.exit-code cucumber.mvn.exit-code):cucumber
        tests}"     # upload cucumber log with combined exit code

        '
    - continue-on-error: true
      name: push-database-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-db:${{ needs.init.outputs.tag-fixed
          }}-postcucumber-${{ matrix.profile }}                                                          #
          upload database image containing post cucumber test state

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: produce-summary
      run: 'echo ''#### images'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-db:${{ needs.init.outputs.tag-fixed }}-postcucumber-${{
        matrix.profile }}'' >> $GITHUB_STEP_SUMMARY

        '
    - continue-on-error: true
      name: assert success
      run: 'if [ $(cat cucumber.exit-code) != 0 ] || [ $(cat cucumber.mvn.exit-code)
        != 0 ]; then tail -1000 cucumber.log && exit 1; fi                                     #
        print cucumber log and exit if cucumber failed

        '
    - continue-on-error: true
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: cucumber-logs
        path: cucumber.log
    strategy:
      fail-fast: false
      matrix:
        include:
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor1 and not @flaky
            and not @ignore"
          profile: profile1
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor2 and not @flaky
            and not @ignore"
          profile: profile2
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor3 and not @flaky
            and not @ignore"
          profile: profile3
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor4 and not @flaky
            and not @ignore"
          profile: profile4
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor5 and not @flaky
            and not @ignore"
          profile: profile5
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor6 and not @flaky
            and not @ignore"
          profile: profile6
        - params: -Dcucumber.filter.tags="@ghActions:run_on_executor7 and not @flaky
            and not @ignore"
          profile: profile7
        - params: -Dcucumber.filter.tags="not @ghActions:run_on_executor1 and not
            @ghActions:run_on_executor2 and not @ghActions:run_on_executor3 and not
            @ghActions:run_on_executor4 and not @ghActions:run_on_executor5 and not
            @ghActions:run_on_executor6 and not @ghActions:run_on_executor7 and not
            @ignore and not @flaky"
          profile: catchall
        profile:
        - profile1
        - profile2
        - profile3
        - profile4
        - profile5
        - profile6
        - profile7
        - catchall
      max-parallel: 10
  frontend:
    needs: init
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      name: build-frontend
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.frontend \

        --cache-to type=inline \

        --cache-from metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-mobile
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.mobile \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }}
        \

        --tag metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-frontend:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}

          docker push metasfresh/metas-mobile:${{ needs.init.outputs.tag-floating
          }}

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: produce-summary
      run: 'echo ''#### images'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-frontend:${{ needs.init.outputs.tag-fixed }}'' >>
        $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-mobile:${{ needs.init.outputs.tag-fixed }}'' >>
        $GITHUB_STEP_SUMMARY

        '
  health_check:
    name: health check
    needs:
    - init
    - backend
    - frontend
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        mfversion: ${{ needs.init.outputs.tag-fixed }}
      name: start docker-compose
      run: 'docker-compose up -d

        '
      working-directory: docker-builds/compose/
    - continue-on-error: true
      if: success() || failure()
      name: Make the script files executable
      run: 'chmod +x apiHealthChecks.sh containerHealthCheck.sh

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: db health check
      run: './containerHealthCheck.sh db

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: webapi health check
      run: './containerHealthCheck.sh webapi

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: app health check
      run: './containerHealthCheck.sh app

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: rabbitmq health check
      run: './containerHealthCheck.sh rabbitmq

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: search health check
      run: './containerHealthCheck.sh search

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: external health check
      run: './containerHealthCheck.sh external

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: webui health check
      run: './containerHealthCheck.sh webui

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: mobile health check
      run: './containerHealthCheck.sh mobile

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: run api health checks
      run: './apiHealthChecks.sh

        '
      working-directory: docker-builds/health/
    - continue-on-error: true
      if: success() || failure()
      name: create docker-compose summary
      run: 'docker-compose ps -a

        docker inspect --format "{{json .State.Health }}" compose_db_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_webapi_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_app_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_rabbitmq_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_search_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_webui_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_external_1 | jq

        docker inspect --format "{{json .State.Health }}" compose_mobile_1 | jq

        '
      working-directory: docker-builds/compose/
    - continue-on-error: true
      env:
        mfversion: ${{ needs.init.outputs.tag-fixed }}
      if: success() || failure()
      name: stop docker-compose
      run: 'docker-compose down

        '
      working-directory: docker-builds/compose/
  init:
    outputs:
      base-version-matrix: ${{ steps.base-version-matrix.outputs.matrix }}
      build-info-properties: ${{ steps.build-info-properties.outputs.content }}
      git-properties: ${{ steps.git-properties.outputs.content }}
      tag-fixed: ${{ steps.build-info-properties.outputs.mfversion }}-${{ steps.sanitize.outputs.refname
        }}.${{ github.run_number }}
      tag-floating: ${{ steps.build-info-properties.outputs.mfversion }}-${{ steps.sanitize.outputs.refname
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      env:
        GIT_REF: ${{ github.ref_name }}
      id: sanitize
      name: sanitize-ref-name
      run: 'echo "refname=$(echo ""$GIT_REF"" | sed -r ''s/([^a-zA-Z0-9.]+)/-/g''
        | sed -r ''s/(^-|-$)//g'')" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      env:
        BUILD_SYSTEM: ${{ runner.name }}
        BUILD_USER: ${{ github.actor }}
      id: build-info-properties
      name: define-build-info-properties
      run: 'echo "content=build.name=github actions\nbuild.system=$BUILD_SYSTEM\nbuild.time=$(date)\nbuild.user=$BUILD_USER\nbuild.version=$(cat
        docker-builds/version.info).3-${{ steps.sanitize.outputs.refname }}.${{ github.run_number
        }}\nbuild.number=${{ github.run_number }}" >> $GITHUB_OUTPUT

        echo "mfversion=$(cat docker-builds/version.info)" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      env:
        GIT_ID: ${{ github.sha }}
        GIT_REF: ${{ github.ref }}
        GIT_URL: ${{ github.repositoryUrl }}
      id: git-properties
      name: define-git-properties
      run: 'echo "content=git.remote.origin.url=$GIT_URL\ngit.branch=$GIT_REF\ngit.commit.id=$GIT_ID\ngit.commit.message=$(git
        show -s --format=%s $GIT_ID)" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      env:
        BASE_VERSION_MATRIX: "${{\n  fromJson(vars.PROJECT_MAP)[github.ref_name] !=\
          \ ''\n  && format('{{ \"include\": [{{ \"project\": \"{0}\", \"branch\"\
          : \"{1}\" }}] }}', fromJson(vars.PROJECT_MAP)[github.ref_name], github.ref_name)\n\
          \  || ''\n}}\n"
        MF_PROJECT: ${{ fromJson(vars.PROJECT_MAP)[github.ref_name] }}
      id: base-version-matrix
      name: set-base-version-matrix
      run: 'echo "matrix=$BASE_VERSION_MATRIX" >> $GITHUB_OUTPUT

        '
    - continue-on-error: true
      name: print-vars
      run: env
    - continue-on-error: true
      env:
        OUT_BUILD_PROPS: ${{ steps.build-info-properties.outputs.content }}
        OUT_GIT_PROPS: ${{ steps.git-properties.outputs.content }}
        OUT_REFNAME: ${{ steps.sanitize.outputs.refname }}
      name: print-info
      run: 'echo -e "[sanitized refname]\n$OUT_REFNAME\n"

        echo -e "[build-info.properties]\n$OUT_BUILD_PROPS\n"

        echo -e "[git-properties]\n$OUT_GIT_PROPS\n"

        echo "#### pipeline ($PIPELINE_VERSION)" >> $GITHUB_STEP_SUMMARY

        echo ''* find more information at https://github.com/metasfresh/metasfresh/tree/${{
        github.ref_name }}/docker-builds/README.md'' >> $GITHUB_STEP_SUMMARY

        echo ''* artifacts will be created for tag `${{ steps.build-info-properties.outputs.mfversion
        }}-${{ steps.sanitize.outputs.refname }}.${{ github.run_number }}`'' >> $GITHUB_STEP_SUMMARY

        echo ''* test results can be found after completion at https://metasfresh.testspace.com/projects/metasfresh:metasfresh/spaces/${{
        github.ref_name }}'' >> $GITHUB_STEP_SUMMARY

        '
  java:
    needs: init
    permissions:
      packages: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        METASFRESH_PACKAGES_READ_TOKEN: ${{ secrets.METASFRESH_PACKAGES_READ_TOKEN
          }}
      name: prepare-settings
      run: 'envsubst < docker-builds/mvn/settings.xml > docker-builds/mvn/local-settings.xml

        '
    - continue-on-error: true
      name: build-commons
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.common \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating
        }} \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --tag metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-backend
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating
        }} \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating }}
        \

        --tag metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-backend-dist
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.backend.dist \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-floating
        }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \

        --build-arg VERSION=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-fixed }}
        \

        .

        '
    - continue-on-error: true
      name: build-camel
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.camel \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating
        }} \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: build-camel-dist
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.camel.dist \

        --cache-to type=inline \

        --cache-from metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating
        }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-floating }} \

        --build-arg VERSION=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed }}
        \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-mvn-common:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-mvn-backend:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-mvn-camel:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-floating
          }}

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: push-maven-dists
      run: 'docker run --rm --env GITHUB_ACTOR=${{ github.actor }} --env GITHUB_TOKEN=${{
        github.token }} metasfresh/metas-mvn-backend-dist:${{ needs.init.outputs.tag-fixed
        }}

        docker run --rm --env GITHUB_ACTOR=${{ github.actor }} --env GITHUB_TOKEN=${{
        github.token }} metasfresh/metas-mvn-camel-dist:${{ needs.init.outputs.tag-fixed
        }}

        '
  junit:
    name: test (java)
    needs:
    - init
    - java
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      uses: testspace-com/setup-testspace@v1
      with:
        domain: metasfresh
        token: ${{ secrets.TESTSPACE_TOKEN }}
    - continue-on-error: true
      env:
        METASFRESH_PACKAGES_READ_TOKEN: ${{ secrets.METASFRESH_PACKAGES_READ_TOKEN
          }}
      name: prepare-settings
      run: 'envsubst < docker-builds/mvn/settings.xml > docker-builds/mvn/local-settings.xml

        '
    - continue-on-error: true
      name: run-junit-tests-j8
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.junit \

        --cache-to type=inline \

        --cache-from metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}
        \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --build-arg SKIP_MIGRATION_SCRIPTS_TEST=true \

        --tag metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }} \

        --tag metasfresh/metas-junit:${{ needs.init.outputs.tag-fixed }} \

        .

        '
    - continue-on-error: true
      name: run-junit-tests-j14
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.camel.junit \

        --cache-to type=inline \

        --cache-from metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14
        \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --tag metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14 \

        --tag metasfresh/metas-junit:${{ needs.init.outputs.tag-fixed }}-j14 \

        .

        '
    - continue-on-error: true
      name: push-result-image
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-junit:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-junit:${{ needs.init.outputs.tag-floating }}-j14

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: push-results
      run: "docker run --rm --volume \"$(pwd)/junit:/reports\" metasfresh/metas-junit:${{\
        \ needs.init.outputs.tag-fixed }}           # extracting java8 test results\
        \ from docker image\ndocker run --rm --volume \"$(pwd)/junit:/reports\" metasfresh/metas-junit:${{\
        \ needs.init.outputs.tag-fixed }}-j14       # extracting java14 test results\
        \ from docker image\nfind junit -type d -links 2 -exec testspace [{}]{}/*.xml\
        \ \\;                                                           # upload all\
        \ junit xml's to testspace \ntestspace \"[junit/commons]junit/commons/junit.log{$(awk\
        \ '{ sum += $1 } END { print sum }' junit/commons/junit.exit-code junit/commons/junit.mvn.exit-code):java\
        \ 8 commons junit tests}\"     # upload commons log with combined exit code\
        \  \ntestspace \"[junit/backend]junit/backend/junit.log{$(awk '{ sum += $1\
        \ } END { print sum }' junit/backend/junit.exit-code junit/backend/junit.mvn.exit-code):java\
        \ 8 backend junit tests}\"     # upload backend log with combined exit code\
        \ \ntestspace \"[junit/camel]junit/camel/junit.log{$(awk '{ sum += $1 } END\
        \ { print sum }' junit/camel/junit.exit-code junit/camel/junit.mvn.exit-code):java\
        \ 14 camel junit tests}\"              # upload camel log with combined exit\
        \ code       \n"
    - continue-on-error: true
      name: assert success
      run: 'if [ $(cat junit/commons/junit.exit-code) != 0 ] || [ $(cat junit/commons/junit.mvn.exit-code)
        != 0 ]; then tail -1000 junit/commons/junit.log && exit 1; fi      # print
        commons log and exit if commons failed

        if [ $(cat junit/backend/junit.exit-code) != 0 ] || [ $(cat junit/backend/junit.mvn.exit-code)
        != 0 ]; then tail -1000 junit/backend/junit.log && exit 1; fi      # print
        backend log and exit if backend failed

        if [ $(cat junit/camel/junit.exit-code) != 0 ] || [ $(cat junit/camel/junit.mvn.exit-code)
        != 0 ]; then tail -1000 junit/camel/junit.log && exit 1; fi            # print
        camel log and exit if camel failed

        '
    - continue-on-error: true
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: junit-logs
        path: junit/**/junit.log
  procurement:
    needs:
    - init
    - java
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.DOCKERHUB_METASFRESH_RW_TOKEN }}
        username: metasfresh
    - continue-on-error: true
      env:
        METASFRESH_PACKAGES_READ_TOKEN: ${{ secrets.METASFRESH_PACKAGES_READ_TOKEN
          }}
      name: prepare-settings
      run: 'envsubst < docker-builds/mvn/settings.xml > docker-builds/mvn/local-settings.xml

        '
    - continue-on-error: true
      name: build-procurement-backend
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.procurement.backend \

        --cache-to type=inline \

        --cache-from metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-floating
        }} \

        --build-arg REFNAME=${{ needs.init.outputs.tag-fixed }} \

        --secret id=mvn-settings,src=docker-builds/mvn/local-settings.xml \

        --tag metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-fixed
        }} \

        .

        '
    - continue-on-error: true
      name: build-procurement-nginx
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.procurement.nginx \

        --cache-to type=inline \

        --cache-from metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-fixed
        }} \

        .

        '
    - continue-on-error: true
      name: build-procurement-rabbitmq
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.procurement.rabbitmq \

        --cache-to type=inline \

        --cache-from metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-fixed
        }} \

        .

        '
    - continue-on-error: true
      name: build-procurement-frontend
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.procurement.frontend \

        --cache-to type=inline \

        --cache-from metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-floating
        }} \

        --tag metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-fixed
        }} \

        .

        '
    - continue-on-error: true
      name: push-images
      uses: nick-fields/retry@v3
      with:
        command: 'docker push metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-floating
          }}

          docker push metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-fixed
          }}

          docker push metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-floating
          }}

          '
        max_attempts: ${{ vars.RETRY_ATTEMPTS }}
        retry_wait_seconds: ${{ vars.RETRY_DELAY }}
        timeout_minutes: ${{ vars.RETRY_TIMEOUT }}
    - continue-on-error: true
      name: produce-summary
      run: 'echo ''#### images'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-procurement-backend:${{ needs.init.outputs.tag-fixed
        }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-procurement-nginx:${{ needs.init.outputs.tag-fixed
        }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-procurement-rabbitmq:${{ needs.init.outputs.tag-fixed
        }}'' >> $GITHUB_STEP_SUMMARY

        echo ''* metasfresh/metas-procurement-frontend:${{ needs.init.outputs.tag-fixed
        }}'' >> $GITHUB_STEP_SUMMARY

        '
  redeploy:
    environment: dev
    needs:
    - init
    - backend
    - frontend
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: dispatching-redeploy
      run: 'curl -X "POST" -H "Accept: application/vnd.github+json" -H "Authorization:
        token ${{ secrets.MF15_KUBERNETES_PAT }}" -d ''{"event_type":"redeploy","client_payload":{"tag":"${{
        needs.init.outputs.tag-floating }}"}}'' https://api.github.com/repos/metasfresh/mf15-kubernetes/dispatches

        '
  test-frontend:
    name: test (frontend)
    needs:
    - init
    - frontend
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v4
    - continue-on-error: true
      uses: testspace-com/setup-testspace@v1
      with:
        domain: metasfresh
        token: ${{ secrets.TESTSPACE_TOKEN }}
    - continue-on-error: true
      name: run-tests
      run: 'docker buildx build \

        --file docker-builds/Dockerfile.frontend \

        --target test \

        --tag metas-frontend:test \

        .

        '
    - continue-on-error: true
      name: publish results
      run: "docker run --rm --volume \"$(pwd)/jest:/reports\" metas-frontend:test\
        \                                       # extracting test results from docker\
        \ image\nfind jest -type d -links 2 -exec testspace [{}]{}/*.xml \\;     \
        \                                           # upload all jest xml's to testspace\
        \ \ntestspace \"[jest/frontend]jest/frontend/jest.log{$(cat jest/frontend/jest.exit-code):webui\
        \ jest tests}\"   # upload webui log with exit code\n"
    - continue-on-error: true
      name: assert success
      run: 'if [ $(cat jest/frontend/jest.exit-code) != 0 ]; then tail -1000 jest/frontend/jest.log
        && exit 1; fi     # print frontend log and exit if frontend failed

        '
    - continue-on-error: true
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: jest-logs
        path: jest/**/jest.log
  update-base-version:
    if: needs.init.outputs.base-version-matrix != ''
    needs:
    - init
    - compatibility-images
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: dispatching-redeploy
      run: 'curl -X "POST" -H "Accept: application/vnd.github+json" -H "Authorization:
        token ${{ secrets.MF15_KUBERNETES_PAT }}" -d ''{"event_type":"update_base_version","client_payload":{"version":"${{
        needs.init.outputs.tag-fixed }}"}}'' https://api.github.com/repos/metasfresh/${{
        matrix.project }}/dispatches

        '
    strategy:
      matrix: ${{fromJSON(needs.init.outputs.base-version-matrix)}}
name: cicd
on:
  repository_dispatch:
    types: trigger-ga___cicd.yaml
